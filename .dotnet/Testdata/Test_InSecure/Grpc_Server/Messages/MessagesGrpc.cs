// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/messages.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace ConsoleApplication.Messages {
  public static partial class CalculateService
  {
    static readonly string __ServiceName = "CalculateService";

    static readonly grpc::Marshaller<global::ConsoleApplication.Messages.AddRequest> __Marshaller_AddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.AddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ConsoleApplication.Messages.MathResponse> __Marshaller_MathResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.MathResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ConsoleApplication.Messages.SubRequest> __Marshaller_SubRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.SubRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::ConsoleApplication.Messages.AddRequest, global::ConsoleApplication.Messages.MathResponse> __Method_AddCalcRequest = new grpc::Method<global::ConsoleApplication.Messages.AddRequest, global::ConsoleApplication.Messages.MathResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCalcRequest",
        __Marshaller_AddRequest,
        __Marshaller_MathResponse);

    static readonly grpc::Method<global::ConsoleApplication.Messages.SubRequest, global::ConsoleApplication.Messages.MathResponse> __Method_SubCalcRequest = new grpc::Method<global::ConsoleApplication.Messages.SubRequest, global::ConsoleApplication.Messages.MathResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubCalcRequest",
        __Marshaller_SubRequest,
        __Marshaller_MathResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ConsoleApplication.Messages.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalculateService</summary>
    public abstract partial class CalculateServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ConsoleApplication.Messages.MathResponse> AddCalcRequest(global::ConsoleApplication.Messages.AddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ConsoleApplication.Messages.MathResponse> SubCalcRequest(global::ConsoleApplication.Messages.SubRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CalculateService</summary>
    public partial class CalculateServiceClient : grpc::ClientBase<CalculateServiceClient>
    {
      /// <summary>Creates a new client for CalculateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalculateServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CalculateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalculateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalculateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalculateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ConsoleApplication.Messages.MathResponse AddCalcRequest(global::ConsoleApplication.Messages.AddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddCalcRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ConsoleApplication.Messages.MathResponse AddCalcRequest(global::ConsoleApplication.Messages.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCalcRequest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ConsoleApplication.Messages.MathResponse> AddCalcRequestAsync(global::ConsoleApplication.Messages.AddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddCalcRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ConsoleApplication.Messages.MathResponse> AddCalcRequestAsync(global::ConsoleApplication.Messages.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCalcRequest, null, options, request);
      }
      public virtual global::ConsoleApplication.Messages.MathResponse SubCalcRequest(global::ConsoleApplication.Messages.SubRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubCalcRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ConsoleApplication.Messages.MathResponse SubCalcRequest(global::ConsoleApplication.Messages.SubRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubCalcRequest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ConsoleApplication.Messages.MathResponse> SubCalcRequestAsync(global::ConsoleApplication.Messages.SubRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubCalcRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ConsoleApplication.Messages.MathResponse> SubCalcRequestAsync(global::ConsoleApplication.Messages.SubRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubCalcRequest, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalculateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalculateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalculateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddCalcRequest, serviceImpl.AddCalcRequest)
          .AddMethod(__Method_SubCalcRequest, serviceImpl.SubCalcRequest).Build();
    }

  }
}
#endregion
