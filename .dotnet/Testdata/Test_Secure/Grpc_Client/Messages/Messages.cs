// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConsoleApplication.Messages {

  /// <summary>Holder for reflection information generated from pb/messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for pb/messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYi9tZXNzYWdlcy5wcm90byI1CgpBZGRSZXF1ZXN0EhIKCmZpcnN0VmFs",
            "dWUYASABKAUSEwoLc2Vjb25kVmFsdWUYAiABKAUiNQoKU3ViUmVxdWVzdBIS",
            "CgpmaXJzdFZhbHVlGAEgASgFEhMKC3NlY29uZFZhbHVlGAIgASgFIh4KDE1h",
            "dGhSZXNwb25zZRIOCgZyZXN1bHQYASABKAUybgoQQ2FsY3VsYXRlU2Vydmlj",
            "ZRIsCg5BZGRDYWxjUmVxdWVzdBILLkFkZFJlcXVlc3QaDS5NYXRoUmVzcG9u",
            "c2USLAoOU3ViQ2FsY1JlcXVlc3QSCy5TdWJSZXF1ZXN0Gg0uTWF0aFJlc3Bv",
            "bnNlQh6qAhtDb25zb2xlQXBwbGljYXRpb24uTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConsoleApplication.Messages.AddRequest), global::ConsoleApplication.Messages.AddRequest.Parser, new[]{ "FirstValue", "SecondValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConsoleApplication.Messages.SubRequest), global::ConsoleApplication.Messages.SubRequest.Parser, new[]{ "FirstValue", "SecondValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConsoleApplication.Messages.MathResponse), global::ConsoleApplication.Messages.MathResponse.Parser, new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddRequest : pb::IMessage<AddRequest> {
    private static readonly pb::MessageParser<AddRequest> _parser = new pb::MessageParser<AddRequest>(() => new AddRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConsoleApplication.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest(AddRequest other) : this() {
      firstValue_ = other.firstValue_;
      secondValue_ = other.secondValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddRequest Clone() {
      return new AddRequest(this);
    }

    /// <summary>Field number for the "firstValue" field.</summary>
    public const int FirstValueFieldNumber = 1;
    private int firstValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstValue {
      get { return firstValue_; }
      set {
        firstValue_ = value;
      }
    }

    /// <summary>Field number for the "secondValue" field.</summary>
    public const int SecondValueFieldNumber = 2;
    private int secondValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondValue {
      get { return secondValue_; }
      set {
        secondValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstValue != other.FirstValue) return false;
      if (SecondValue != other.SecondValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstValue != 0) hash ^= FirstValue.GetHashCode();
      if (SecondValue != 0) hash ^= SecondValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FirstValue);
      }
      if (SecondValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SecondValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstValue);
      }
      if (SecondValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddRequest other) {
      if (other == null) {
        return;
      }
      if (other.FirstValue != 0) {
        FirstValue = other.FirstValue;
      }
      if (other.SecondValue != 0) {
        SecondValue = other.SecondValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FirstValue = input.ReadInt32();
            break;
          }
          case 16: {
            SecondValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubRequest : pb::IMessage<SubRequest> {
    private static readonly pb::MessageParser<SubRequest> _parser = new pb::MessageParser<SubRequest>(() => new SubRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConsoleApplication.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRequest(SubRequest other) : this() {
      firstValue_ = other.firstValue_;
      secondValue_ = other.secondValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRequest Clone() {
      return new SubRequest(this);
    }

    /// <summary>Field number for the "firstValue" field.</summary>
    public const int FirstValueFieldNumber = 1;
    private int firstValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstValue {
      get { return firstValue_; }
      set {
        firstValue_ = value;
      }
    }

    /// <summary>Field number for the "secondValue" field.</summary>
    public const int SecondValueFieldNumber = 2;
    private int secondValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondValue {
      get { return secondValue_; }
      set {
        secondValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstValue != other.FirstValue) return false;
      if (SecondValue != other.SecondValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstValue != 0) hash ^= FirstValue.GetHashCode();
      if (SecondValue != 0) hash ^= SecondValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FirstValue);
      }
      if (SecondValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SecondValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstValue);
      }
      if (SecondValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubRequest other) {
      if (other == null) {
        return;
      }
      if (other.FirstValue != 0) {
        FirstValue = other.FirstValue;
      }
      if (other.SecondValue != 0) {
        SecondValue = other.SecondValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FirstValue = input.ReadInt32();
            break;
          }
          case 16: {
            SecondValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MathResponse : pb::IMessage<MathResponse> {
    private static readonly pb::MessageParser<MathResponse> _parser = new pb::MessageParser<MathResponse>(() => new MathResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MathResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConsoleApplication.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathResponse(MathResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathResponse Clone() {
      return new MathResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MathResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MathResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MathResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
